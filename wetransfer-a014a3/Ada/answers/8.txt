Q: What is a package? What is the structure of a package?

In general package is : Interface to encapsulate data type and data operations. Also, Packages are program units that allow the specification of groups of logically related entities. Typically, 
a package contains the declaration of a type (often a private type or private extension) along with the declaration of primitive subprograms of the type, 
which can be called from outside the package, while their inner workings remain hidden from outside users. 
In Ada we have the ads file and the adb file, in the ads file, all the declaration of public operations and in the private part, the implementation of the actual type is hidden and any other information
that the developer wants to hide from the user.

Example of ads file :

package Lines is

      subtype Elem is Integer;

      type Queue( Max: Positive ) is limited private;

      procedure Hiext( S: in out Queue; E: in Elem );
      procedure Lopop( S: in out Queue; E: out Elem );
      function Lov( S: Queue ) return Elem;
      function Is_Empty( S: Queue ) return Boolean;
      function Is_Full( S: Queue ) return Boolean;
      function Size( S: Queue ) return Natural;

private

      type TArray is array ( Integer range <> ) of Elem;
      type Queue( Max: Positive ) is record
                                       Adatok: TArray(1..Max);
                                       Putter, Getter: Positive := 1;
                                       Size: Natural := 0;
                                   end record;

end Lines;

Example of adb file :

package body Lines is

      procedure Hiext( S: in out Queue; E: in Elem ) is
      begin
          S.Adatok(S.Putter) := E;
          S.Putter := (S.Putter mod S.Max) + 1; 
          S.Size := S.Size + 1;
      end;

      procedure Lopop( S: in out Queue; E: out Elem ) is
      begin
          E := Lov(S);
          S.Getter := (S.Getter mod S.Max) + 1; 
          S.Size := S.Size - 1;
      end;

      function Lov( S: Queue ) return Elem is
      begin
          return S.Adatok(S.Getter);
      end;

      function Is_Empty( S: Queue ) return Boolean is
      begin
          return Size(S) = 0;
      end;

      function Is_Full( S: Queue ) return Boolean is
      begin
          return Size(S) = S.Max;
      end;

      function Size( S: Queue ) return Natural is
      begin
          return S.Size;
      end;

end Lines;